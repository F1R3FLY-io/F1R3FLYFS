plugins {
    id 'java-library'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
    id 'net.researchgate.release' version '2.8.1'
    id 'maven-publish'
    id "com.google.protobuf" version "0.9.4"
}

def protobufVersion = '3.25.2'
def secpVersion     = '0.13.0'
def tcVersion       = '1.19.4'
def junitVersion    = '5.10.1'

repositories {
    mavenCentral()
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:$protobufVersion"
    }

    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.61.0'
        }
    }

    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

sourceSets {
    main {
        proto {
            // Include the 'src/main/proto' directory for proto files
            srcDir 'src/main/proto'
            // Include local copies of external protobuf files
            srcDir 'src/main/protobuf_external'
            srcDir 'src/main/protobuf_models'
            srcDir 'src/main/protobuf_external/scalapb'
        }

        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
    }
    
    e2e {
        java {
            srcDir 'src/e2e/java'
        }
        resources {
            srcDir 'src/e2e/resources'
        }
        compileClasspath += sourceSets.main.output + sourceSets.test.output + configurations.testRuntimeClasspath
        runtimeClasspath += output + compileClasspath
    }
}

java {
//    withSourcesJar()
//    withJavadocJar()
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

shadowJar {
    mergeServiceFiles()
    archiveClassifier = '' // Remove classifier to make this the main JAR
    relocate 'org.objectweb.asm', 'org.objectweb.asm.shaded'
    
    manifest {
        attributes(
                'Main-Class': 'io.f1r3fly.f1r3drive.app.F1r3DriveCli'
        )
    }
}

jar {
    manifest {
        attributes(
                'Main-Class': 'io.f1r3fly.f1r3drive.app.F1r3DriveCli'
        )
    }
}

task run(type: JavaExec) {
    group = "Execution"
    description = "Run the main class with JavaExecTask"
    classpath = sourceSets.main.runtimeClasspath
    mainClass = "io.f1r3fly.f1r3drive.app.F1r3DriveCli"
}

tasks.withType(Javadoc).configureEach {
    options.addStringOption('Xdoclint:none', '-quiet')
}

test {
    useJUnitPlatform()
    maxHeapSize = '4096m'
}

task e2eTest(type: Test) {
    description = 'Runs the e2e tests'
    group = 'verification'
    testClassesDirs = sourceSets.e2e.output.classesDirs
    classpath = sourceSets.e2e.runtimeClasspath
    
    useJUnitPlatform()
    maxHeapSize = '4096m'
    
    // Don't run e2e tests as part of the regular build
    shouldRunAfter test
}

// E2e tests will only run when explicitly called with the e2eTest task

configurations {
    e2eImplementation.extendsFrom testImplementation
    e2eRuntimeOnly.extendsFrom testRuntimeOnly
}

dependencies {
    api 'com.github.jnr:jnr-ffi:2.2.15'
    api 'com.github.jnr:jnr-posix:3.1.18'
    api 'com.github.jnr:jnr-constants:0.10.4'

    implementation group: 'javax.annotation', name: 'javax.annotation-api', version: '1.3.2'

    implementation group: 'com.google.protobuf', name: 'protobuf-java', version: protobufVersion
    implementation group: 'io.grpc', name: 'grpc-all', version: '1.61.0'

    implementation group: 'com.rfksystems', name: 'blake2b', version: '2.0.0'
    
    // Add Keccak-256 implementation
    implementation 'org.bouncycastle:bcprov-jdk15on:1.70'
    
    implementation group: 'fr.acinq.secp256k1', name: 'secp256k1-kmp', version: secpVersion
    runtimeOnly group: 'fr.acinq.secp256k1', name: 'secp256k1-kmp-jni-jvm', version: secpVersion

    implementation group: 'io.smallrye.reactive', name: 'mutiny', version: '2.5.6'

    implementation 'info.picocli:picocli:4.7.5'

    implementation 'ch.qos.logback:logback-classic:1.2.3'
    implementation 'ch.qos.logback:logback-core:1.2.3'
    implementation 'org.slf4j:slf4j-api:1.7.30'

    annotationProcessor 'info.picocli:picocli-codegen:4.7.5'

    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"

    testImplementation "org.testcontainers:testcontainers:$tcVersion"
    testImplementation "org.testcontainers:junit-jupiter:$tcVersion"

    testImplementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.13'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '4.8.0'

    testImplementation group: 'commons-io', name: 'commons-io', version: '2.11.0'

    // https://mvnrepository.com/artifact/commons-codec/commons-codec
    implementation 'commons-codec:commons-codec:1.17.0'

    testImplementation "org.junit.jupiter:junit-jupiter-params:$junitVersion"

}

compileJava {
    options.compilerArgs += ["-Aproject=${project.group}/${project.name}"]
}

release {
    newVersionCommitMessage = '[f1r3Drive release] - '
    preTagCommitMessage = '[f1r3Drive release] - pre tag commit: '
    buildTasks = ['clean', 'assemble', 'shadowJar']
}

// Make build depend on shadowJar
build.dependsOn shadowJar

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'f1r3Drive'
            from components.java
            
            // Include the shadow JAR as the main artifact
            artifact shadowJar

            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'f1r3Drive'
                description = 'f1r3Drive is a FUSE implementation in java using Java Native Runtime (JNR) and Rholang.'
                licenses {
                    license {
                        name = 'The MIT License (MIT)'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }

                developers {
                    // developer {
                    // }
                }
            }
        }
    }

    repositories {
        maven {
            // A test repository in the build repository
            // allowing easy verification of published artifacts
            name = 'projectLocal'
            url = file("${buildDir}/repo")
        }
        
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/${System.getenv("GITHUB_REPOSITORY")}"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}





tasks.named('processResources') {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE // or EXCLUDE, depending on desired behavior
}
