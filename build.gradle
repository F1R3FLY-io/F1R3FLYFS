plugins {
    id 'java-library'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
    id 'net.researchgate.release' version '2.8.1'
    id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
    id 'maven-publish'
    id 'signing'
    id "com.google.protobuf" version "0.9.4"
}

def protobufVersion = '3.25.2'
def secpVersion     = '0.13.0'
def tcVersion       = '1.19.4'
def junitVersion    = '5.10.1'

repositories {
    jcenter()
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:$protobufVersion"
    }

    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.61.0'
        }
    }

    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

sourceSets {
    main {
        proto {
            // Include the 'src/main/proto' directory for proto files
            //srcDir 'src/main/proto'
            // Include the 'src/main/protobuf_external' directory for proto files
            //srcDir 'src/main/protobuf_external'
            srcDir '../f1r3fly/node/target/protobuf_external'
            srcDir '../f1r3fly/models/src/main/protobuf'
            srcDir '../f1r3fly/node/target/protobuf_external/scalapb'


            // integration with Finder Sync Extension
            srcDir 'src/main/proto'
        }

        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
    }
}

java {
//    withSourcesJar()
//    withJavadocJar()
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

shadowJar {
    mergeServiceFiles()
    archiveClassifier = 'shadow'
    relocate 'org.objectweb.asm', 'org.objectweb.asm.shaded'
}

jar {
    manifest {
        attributes(
                'Main-Class': 'io.f1r3fly.fs.examples.F1r3flyFSMain'
        )
    }
}

task run(type: JavaExec) {
    group = "Execution"
    description = "Run the main class with JavaExecTask"
    classpath = sourceSets.main.runtimeClasspath
    mainClass = "io.f1r3fly.fs.examples.F1r3flyFSMain"
}

tasks.withType(Javadoc).configureEach {
    options.addStringOption('Xdoclint:none', '-quiet')
}

test {
    useJUnitPlatform()
    maxHeapSize = '4096m'
}

dependencies {
    api 'com.github.jnr:jnr-ffi:2.2.15'
    api 'com.github.jnr:jnr-posix:3.1.18'
    api 'com.github.jnr:jnr-constants:0.10.4'

    implementation group: 'javax.annotation', name: 'javax.annotation-api', version: '1.3.2'

    implementation group: 'com.google.protobuf', name: 'protobuf-java', version: protobufVersion
    implementation group: 'io.grpc', name: 'grpc-all', version: '1.61.0'

    implementation group: 'com.rfksystems', name: 'blake2b', version: '2.0.0'

    implementation group: 'fr.acinq.secp256k1', name: 'secp256k1-kmp', version: secpVersion
    runtimeOnly group: 'fr.acinq.secp256k1', name: 'secp256k1-kmp-jni-jvm', version: secpVersion

    implementation group: 'io.smallrye.reactive', name: 'mutiny', version: '2.5.6'

    implementation 'info.picocli:picocli:4.7.5'

    // https://mvnrepository.com/artifact/org.bitcoin-s/bitcoin-s-crypto
    // needed for creating a fresh (EC) private key
    implementation group: 'org.bitcoin-s', name: 'bitcoin-s-crypto_2.13', version: '1.9.3'

    implementation 'ch.qos.logback:logback-classic:1.2.3'
    implementation 'ch.qos.logback:logback-core:1.2.3'
    implementation 'org.slf4j:slf4j-api:1.7.30'

    annotationProcessor 'info.picocli:picocli-codegen:4.7.5'

    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"

    testImplementation "org.testcontainers:testcontainers:$tcVersion"
    testImplementation "org.testcontainers:junit-jupiter:$tcVersion"

    testImplementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.13'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '4.8.0'

    testImplementation group: 'commons-io', name: 'commons-io', version: '2.11.0'

    // https://mvnrepository.com/artifact/commons-codec/commons-codec
    implementation 'commons-codec:commons-codec:1.17.0'

}

compileJava {
    options.compilerArgs += ["-Aproject=${project.group}/${project.name}"]
}

release {
    newVersionCommitMessage = '[f1r3flyfs release] - '
    preTagCommitMessage = '[f1r3flyfs release] - pre tag commit: '
    buildTasks = ['clean', 'assemble', 'publishToSonatype', 'closeAndReleaseSonatypeStagingRepository']
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'f1r3flyfs'
            from components.java

            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'f1r3flyfs'
                description = 'f1r3flyfs is a FUSE implementation in java using Java Native Runtime (JNR) and Rholang.'
                url = 'https://github.com/SerCeMan/jnr-fuse'
                licenses {
                    license {
                        name = 'The MIT License (MIT)'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }

                developers {
                    developer {
                        id = 'SerCe'
                        name = 'Sergey Tselovalnikov'
                        email = 'sergeicelov@gmail.com'
                    }
                }

                scm {
                    url = 'https://github.com/SerCeMan/jnr-fuse'
                    connection = 'scm:git:git@github.com:SerCeMan/jnr-fuse.git'
                    developerConnection = 'scm:git:git@github.com:SerCeMan/jnr-fuse.git'
                }
            }
        }
    }

    repositories {
        maven {
            // A test repository in the build repository
            // allowing easy verification of published artifacts
            name = 'projectLocal'
            url = file("${buildDir}/repo")
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            username.set(providers.environmentVariable("SONATYPE_LOGIN").forUseAtConfigurationTime())
            password.set(providers.environmentVariable("SONATYPE_PASSWORD").forUseAtConfigurationTime())
        }
    }
}

signing {
    sign publishing.publications.mavenJava
    setRequired {
        gradle.taskGraph.allTasks.any {
            it.name == 'publishToSonatype'
        }
    }
}

tasks.named('processResources') {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE // or EXCLUDE, depending on desired behavior
}
